## Based off of Ref: https://github.com/argoproj/argo-cd
##


## Argo-CD Server Configs
##
argo-cd:
  nameOverride: argocd
  fullnameOverride: ""
  kubeVersionOverride: ""

  global:
    image:
      repository: quay.io/argoproj/argocd
      tag: v2.1.1
      imagePullPolicy: IfNotPresent
    ## Annotations applied to all pods
    podAnnotations: {}
    ## Labels applied to all pods
    podLabels: {}
    imagePullSecrets: [] # Place holder when we have our ECR
    hostAliases: [] # place holder for our dns records when we have it

  ## Controller
  controller:
    name: application-controller

    ## Argo controller commandline flags
    args:
      statusProcessors: "20"
      operationProcessors: "10"
      appResyncPeriod: "180" # Every 3 minutes
      selfHealTimeout: "5"
      repoServerTimeoutSeconds: "60"

    ## Argo controller log format: text|json
    logFormat: json
    ## Argo controller log level
    logLevel: info

    ## Configures the controller port
    containerPort: 8082

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    ## Controller service configuration
    service:
      annotations: {}
      labels: {}
      port: 8082
      portName: https-controller

    serviceAccount:
      create: true
      name: argocd-application-controller
      ## Annotations applied to created service account
      annotations: {}
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true

    ## Server metrics controller configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8082
      serviceMonitor:
        enabled: false
        interval: 30s
        relabelings: []
        metricRelabelings: []
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}
      rules:
        enabled: false
        spec: []
        # - alert: ArgoAppMissing
        #   expr: |
        #     absent(argocd_app_info)
        #   for: 15m
        #   labels:
        #     severity: critical
        #   annotations:
        #     summary: "[ArgoCD] No reported applications"
        #     description: >
        #       ArgoCD has not reported any applications data for the past 15 minutes which
        #       means that it must be down or not functioning properly.  This needs to be
        #       resolved for this cloud to continue to maintain state.
        # - alert: ArgoAppNotSynced
        #   expr: |
        #     argocd_app_info{sync_status!="Synced"} == 1
        #   for: 12h
        #   labels:
        #     severity: warning
        #   annotations:
        #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
        #     description: >
        #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
        #       12 hours which means that the state of this cloud has drifted away from the
        #       state inside Git.
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    ## Enable Admin ClusterRole resources.
    ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
    clusterAdminAccess:
      enabled: true
    ## Enable Custom Rules for the Application Controller's Cluster Role resource
    ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off
    clusterRoleRules:
      enabled: false
      rules: []


  ## Dex

  ## Dex is disabled for now but leaving in place holder since this will be what enables us to integrate with okta
  dex:
    enabled: false
    name: dex-server

    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
      serviceMonitor:
        enabled: false
        interval: 30s
        relabelings: []
        metricRelabelings: []
        # selector:
        #   prometheus: kube-prometheus
        # namespace: monitoring
        # additionalLabels: {}

    image:
      repository: ghcr.io/dexidp/dex
      tag: v2.30.0
      imagePullPolicy: IfNotPresent
    initImage:
      repository:
      tag:
      imagePullPolicy:

    ## Environment variables to pass to the Dex server
    ##
    env: []

    ## envFrom to pass to the Dex server
    envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

    ## Probes for Dex server
    ## Supported from Dex >= 2.28.0
    livenessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    serviceAccount:
      create: true
      name: argocd-dex-server
      ## Annotations applied to created service account
      annotations: {}
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true

    ## Additional volumeMounts to the controller main container.
    volumeMounts:
      - name: static-files
        mountPath: /shared

    ## Additional volumes to the controller pod.
    volumes:
      - name: static-files
        emptyDir: {}

    ## Dex deployment container ports
    containerPortHttp: 5556
    servicePortHttp: 5556
    servicePortHttpName: http
    containerPortGrpc: 5557
    servicePortGrpc: 5557
    servicePortGrpcName: grpc
    containerPortMetrics: 5558
    servicePortMetrics: 5558

  ## Redis
  redis:
    enabled: true
    name: redis

    image:
      repository: redis
      tag: 6.2.4-alpine
      imagePullPolicy: IfNotPresent

    containerPort: 6379
    servicePort: 6379

  ## Server
  server:
    name: server

    replicas: 1

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50

    ## Additional command line arguments to pass to argocd-server
    ##
    extraArgs:
      - --insecure
      ##- --rootpath
      ##- /argo-cd

    # This flag is used to either remove or pass the CLI flag --staticassets /shared/app to the argocd-server app
    staticAssets:
      enabled: true

    ## Argo server log format: text|json
    logFormat: json
    ## Argo server log level
    logLevel: info

    ## Configures the server port
    containerPort: 8080

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1


    ## Certificate configuration place holder will need to be updated once we know how were doing certs
    certificate:
      enabled: false
      domain: localhost
      issuer:
        kind: # ClusterIssuer
        name: # letsencrypt
      additionalHosts: []
      secretName: argocd-server-tls

    ## Server service configuration
    service:
      annotations: {}
      labels: {}
      type: ClusterIP
      ## For node port default ports
      nodePortHttp: 30080
      nodePortHttps: 30443
      servicePortHttp: 8080
      servicePortHttps: 443
      servicePortHttpName: http
      servicePortHttpsName: https
      namedTargetPort: true
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalIPs: []
      externalTrafficPolicy: ""
      sessionAffinity: ""

    ## Server metrics service configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8083
      serviceMonitor:
        enabled: false
        interval: 30s
        relabelings: []
        metricRelabelings: []
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    serviceAccount:
      create: true
      name: argocd-server
      ## Annotations applied to created service account
      annotations: {}
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true

    # Leaving place holders for when we get ingress figured out.
    # Additional docs for SSO / public & private ingress in aws here:
    # https://argoproj.github.io/argo-cd/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode
    ##
   #ingress:
   #   enabled: false
   #   annotations: {}
   #   labels: {}
   #   ingressClassName: ""

      ## Argo Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      ##
      #hosts:
      #  []
        # - argocd.example.com
      #paths:
      #  - /
      #pathType: Prefix
      #extraPaths:
      #  []
       # # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation
        ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
        # - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation
      #tls:
      #  []
        # - secretName: argocd-tls-certificate
        #   hosts:
        #     - argocd.example.com
      ####https: false
    # dedicated ingress for gRPC as documented at
    # https://argoproj.github.io/argo-cd/operator-manual/ingress/
    ###ingressGrpc:
    ###  enabled: false
    ###  isAWSALB: false
    ###  annotations: {}
    ###  labels: {}
    ###  ingressClassName: ""

    ###  awsALB:
        ## Service Type if isAWSALB is set to true
        ## Can be of type NodePort or ClusterIP depending on which mode you are
        ## are running. Instance mode needs type NodePort, IP mode needs type
        ## ClusterIP
        ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic
     ##   serviceType: NodePort
        # This tells AWS to send traffic from the ALB using HTTP2. Can use GRPC as well if you want to leverage GRPC specific features
     ##   backendProtocolVersion: HTTP2

      ## Argo Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      ##
     ## hosts:
     ##   []
        # - argocd.example.com
     ## paths:
     ##   - /
     ##pathType: Prefix
     ## extraPaths:
     ##   []
        # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation
        ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
        # - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation
      #tls:
      #  []
        # - secretName: argocd-tls-certificate
        #   hosts:
        #     - argocd.example.com
      #https: false

    ## ArgoCD config
    ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    configEnabled: true
    config:
      # Argo CD's externally facing base URL (optional). Required when configuring SSO
      #url: localhost
      # Argo CD instance label key
      application.instanceLabelKey: argocd.argoproj.io/instance

      # oidc.config: Goes here


    ## ArgoCD rbac config
    ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    #rbacConfig:
    #  {}
      # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).
      # Policy rules are in the form:
      #   p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #   g, subject, inherited-subject
      # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
      # policy.csv: |
      #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'
      #   p, my-org:team-alpha, applications, sync, my-project/*, allow
      #   # Grant all members of 'my-org:team-beta' admins
      #   g, my-org:team-beta, role:admin
      # policy.default is the name of the default role which Argo CD will falls back to, when
      # authorizing API requests (optional). If omitted or empty, users may be still be able to login,
      # but will see no apps, projects, etc...
      # policy.default: role:readonly
      # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
      # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.
      # scopes: '[cognito:groups, email]'

    # Boolean determining whether or not to create the configmap. If false, it is expected the configmap will be created
    # by something else. ArgoCD will not work if there is no configMap created with the name above.
    #rbacConfigCreate: true

    ## Enable Admin ClusterRole resources.
    ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
    ## In our case we want argo cd to manage its self and other assets in the support cluster so enabled
    clusterAdminAccess:
      enabled: true


  ## Repo Server
  repoServer:
    name: repo-server

    replicas: 1

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50

    ## Argo repoServer log format: text|json
    logFormat: json
    ## Argo repoServer log level
    logLevel: info

    ## Configures the repo server port
    containerPort: 8081

    ## Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    ## Repo server service configuration
    service:
      annotations: {}
      labels: {}
      port: 8081
      portName: https-repo-server

    ## Repo server metrics service configuration
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8084
      serviceMonitor:
        enabled: false
        interval: 30s
        relabelings: []
        metricRelabelings: []
      #   selector:
      #     prometheus: kube-prometheus
      #   namespace: monitoring
      #   additionalLabels: {}

    ## Repo server service account
    ## If create is set to true, make sure to uncomment the name and update the rbac section below
    serviceAccount:
      create: false
      #  name: argocd-repo-server
      ## Annotations applied to created service account
      annotations: {}
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true

    ## Repo server rbac rules
    # rbac:
    #   - apiGroups:
    #     - argoproj.io
    #     resources:
    #     - applications
    #     verbs:
    #     - get
    #     - list
    #     - watch

  ## Argo Configs
  configs:
    knownHostsAnnotations: {}
    knownHosts:
      data:
        ssh_known_hosts: |
          github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==